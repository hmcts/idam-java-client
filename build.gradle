plugins {
    id 'checkstyle'
    id 'io.spring.dependency-management' version '1.0.13.RELEASE'
    id 'org.springframework.boot' version '2.7.3'
    id 'com.jfrog.bintray' version '1.8.5'
    id 'com.github.ben-manes.versions' version '0.42.0'
    id 'org.owasp.dependencycheck' version '7.1.2'
    id 'java-library'
    id 'maven-publish'
    id 'au.com.dius.pact' version '4.3.14'
}

def buildNumber = System.getenv("RELEASE_VERSION")?.replace("refs/tags/", "") ?: "DEV-SNAPSHOT"

group 'uk.gov.hmcts.reform'
version buildNumber

dependencyUpdates.resolutionStrategy {
    componentSelection { rules ->
        rules.all {
            def isNonStable = { String version ->
                ['alpha', 'beta', 'rc', 'cr', 'm', 'preview', 'b', 'ea'].any { qualifier ->
                    version ==~ /(?i).*[.-]\$qualifier[.\\d-+]*/
                }
            }
            if (isNonStable(candidate.version) && !isNonStable(currentVersion)) {
                selection.reject('Release candidate')
            }
        }
    }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
    // Specifies if the build should be failed if a CVSS score above a specified level is identified.
    // range of 0-10 fails the build, anything greater and it doesn't fail the build
    failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
    suppressionFile = 'config/owasp/suppressions.xml'

    analyzers {
        // Disable scanning of .NET related binaries
        assemblyEnabled = false
    }
}

checkstyle {
    maxWarnings = 0
    toolVersion = '8.31'
    getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

allprojects {
    sourceCompatibility = 11
    targetCompatibility = 11
}

compileJava {
    options.compilerArgs << '-parameters' << '-Xlint:deprecation'
}

compileTestJava {
    options.compilerArgs << '-Xlint:deprecation'
}

repositories {
    mavenLocal()
    jcenter()
}

def versions = [
        serentity                       : '2.0.17',
        pact_version                    : '4.1.7',
]

jar {
    manifest {
        attributes 'Implementation-Title': project.name, 'Implementation-Version': project.version
    }
}

task printVersion {
    doLast {
        print project.version
    }
}

def gitRepo = "https://github.com/hmcts/idam-java-client"

def pomConfig = {
    licenses {
        license {
            name "MIT License"
            url "http://www.opensource.org/licenses/mit-license.php"
            distribution "repo"
        }
    }

    scm {
        url "https://github.com/hmcts/idam-java-client"
    }
}

sourceSets {
    test {
        java.srcDir 'src/test/unit/java'
    }
    testContract {
        java {
            compileClasspath += main.output
            runtimeClasspath += main.output
            srcDir file('src/contractTest/java')
        }
        resources.srcDir file('src/contractTest/resources')
    }
}

configurations {
    testContractCompile.extendsFrom testCompile
    testContractRuntime.extendsFrom testRuntime
}

task contract(type: Test, description: 'Runs the contract tests.', group: 'Verification') {
    useJUnitPlatform()
    testClassesDirs = sourceSets.testContract.output.classesDirs
    classpath = sourceSets.testContract.runtimeClasspath
}

task runAndPublishConsumerPactTests(type: Test){
    useJUnitPlatform()
    logger.lifecycle("Runs pact Tests")
    testClassesDirs = sourceSets.testContract.output.classesDirs
    classpath = sourceSets.testContract.runtimeClasspath

}

runAndPublishConsumerPactTests.finalizedBy pactPublish

java {
    withSourcesJar()
    withJavadocJar()
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java
            groupId project.group
            artifactId 'idam-client'
            version project.version

            pom.withXml {
                def root = asNode()
                root.appendNode('description', 'Idam client')
                root.appendNode('name', 'Idam client')
                root.appendNode('url', gitRepo)
                root.children().last() + pomConfig
            }
        }
    }
}

ext {
    lombokVersion = '1.18.8'
    springCloudVersion = '2022.0.0'
    junitJupiterVersion = '5.9.0'
}

ext["spring-cloud-openfeign.version"] = "3.0.1"

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

dependencies {
    api group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign'
    api group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
    api group: 'io.github.openfeign', name: 'feign-jackson', version: '11.9.1'
    api group: 'io.github.openfeign', name: 'feign-httpclient', version: '11.9.1'

    compileOnly group: 'org.projectlombok', name: 'lombok', version: lombokVersion
    annotationProcessor group: 'org.projectlombok', name: 'lombok', version: lombokVersion

    testImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion


    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'

    testImplementation group: 'org.springframework.cloud', name: 'spring-cloud-contract-wiremock', {
        exclude group: 'com.github.tomakehurst', module: 'wiremock-standalone'
    }
    testImplementation group: 'com.github.tomakehurst', name:'wiremock', version: '2.27.2'

    testContractImplementation group: 'au.com.dius.pact.consumer', name: 'junit5', version: versions.pact_version

    testContractImplementation group: 'net.serenity-bdd', name: 'serenity-core', version: versions.serentity
    testContractImplementation group: 'net.serenity-bdd', name: 'serenity-junit', version: versions.serentity
    testContractImplementation group: 'net.serenity-bdd', name: 'serenity-rest-assured', version: versions.serentity
    testContractImplementation group: 'net.serenity-bdd', name: 'serenity-spring', version: versions.serentity
    testContractImplementation group: 'io.jsonwebtoken', name: 'jjwt', version: '0.9.1'
    testContractImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
    testContractImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion
    testContractRuntimeOnly group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: junitJupiterVersion
    testContractImplementation group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: junitJupiterVersion

    testContractImplementation sourceSets.main.runtimeClasspath
    testContractImplementation sourceSets.test.runtimeClasspath
}

wrapper {
    distributionType = Wrapper.DistributionType.ALL
}

test {
    useJUnitPlatform()
}

pact {
    publish {
        pactDirectory = 'build/pacts'
        pactBrokerUrl = System.getProperty("pact.broker.url") ?: 'http://localhost:80'
        tags = [System.getenv("PACT_BRANCH_NAME") ?: 'Dev']
    }
}

bootJar {
    enabled = false
}

jar {
    enabled = true
    archiveClassifier = ''
}
